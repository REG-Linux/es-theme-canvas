name: Canvas Theme CI/CD Pipeline

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main, master]
    paths:
      - "**.xml"
      - "**.md"
      - "themes/**"

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"

jobs:
  validate-xml:
    runs-on: ubuntu-latest
    outputs:
      xml-files-changed: ${{ steps.changes.outputs.xml }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            xml:
              - '**/*.xml'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            /usr/local/lib/python*/site-packages
          key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y libxml2-utils imagemagick
          pip install --upgrade pip
          pip install lxml xmlschema beautifulsoup4

      - name: Validate XML syntax
        run: |
          set -e
          xml_files=$(find . -type f -name "*.xml" -not -path "./.git/*")
          
          if [ -z "$xml_files" ]; then
            echo "‚ö†Ô∏è No XML files found"
            exit 0
          fi
          
          echo "Found XML files:"
          echo "$xml_files"
          
          failed_files=()
          
          for file in $xml_files; do
            echo "Validating $file..."
            if xmllint --noout "$file" 2>/dev/null; then
              echo "‚úÖ $file is valid"
            else
              echo "‚ùå $file validation failed"
              xmllint --noout "$file" || true
              failed_files+=("$file")
            fi
          done
          
          if [ ${#failed_files[@]} -gt 0 ]; then
            echo "‚ùå Validation failed for: ${failed_files[*]}"
            exit 1
          fi
          
          echo "‚úÖ All XML files validated successfully"

      - name: Check XML encoding and structure
        run: |
          python3 << 'EOF'
          import os
          import xml.etree.ElementTree as ET
          from pathlib import Path
          
          def validate_xml_structure(file_path):
              try:
                  tree = ET.parse(file_path)
                  root = tree.getroot()
                  
                  print(f"‚úÖ {file_path} structure OK")
                  return True
              except ET.ParseError as e:
                  print(f"‚ùå Parse error in {file_path}: {e}")
                  return False
              except Exception as e:
                  print(f"‚ùå Error validating {file_path}: {e}")
                  return False
          
          xml_files = list(Path('.').rglob('*.xml'))
          xml_files = [f for f in xml_files if '.git' not in str(f)]
          
          if not xml_files:
              print("‚ÑπÔ∏è No XML files found")
              exit(0)
          
          failed = []
          for file_path in xml_files:
              if not validate_xml_structure(file_path):
                  failed.append(str(file_path))
          
          if failed:
              print(f"‚ùå Structure validation failed for: {failed}")
              exit(1)
          
          print("‚úÖ All XML files have valid structure")
          EOF

      - name: Check image references
        run: |
          python3 << 'EOF'
          import re
          import os
          from pathlib import Path
          
          def check_image_refs(xml_file):
              missing_files = []
              
              try:
                  with open(xml_file, 'r', encoding='utf-8') as f:
                      content = f.read()
                  
                  # Pattern for image references
                  patterns = [
                      r'path="([^"]+\.(?:svg|png|jpg|jpeg|webp|gif))"',
                      r'src="([^"]+\.(?:svg|png|jpg|jpeg|webp|gif))"',
                      r'background="([^"]+\.(?:svg|png|jpg|jpeg|webp|gif))"'
                  ]
                  
                  for pattern in patterns:
                      matches = re.findall(pattern, content, re.IGNORECASE)
                      for match in matches:
                          # Resolve theme path variables
                          resolved = match.replace('${themePath}', './themes/default')
                          resolved = resolved.replace('${theme}', './themes/default')
                          
                          if resolved.startswith('./') or resolved.startswith('/'):
                              if not Path(resolved).exists():
                                  missing_files.append((match, resolved))
              
              except Exception as e:
                  print(f"‚ö†Ô∏è Error checking {xml_file}: {e}")
              
              return missing_files
          
          xml_files = list(Path('.').rglob('*.xml'))
          xml_files = [f for f in xml_files if '.git' not in str(f)]
          
          all_missing = []
          
          for xml_file in xml_files:
              missing = check_image_refs(xml_file)
              if missing:
                  print(f"‚ö†Ô∏è Missing images referenced in {xml_file}:")
                  for orig, resolved in missing:
                      print(f"  - {orig} -> {resolved}")
                  all_missing.extend(missing)
          
          if all_missing:
              print(f"\n‚ö†Ô∏è Found {len(all_missing)} missing image references")
              print("This won't fail the build but should be addressed")
          else:
              print("‚úÖ All image references verified")
          EOF

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Security scan for suspicious content
        run: |
          echo "üîç Scanning for potential security issues..."
          
          # Check for suspicious patterns
          suspicious_patterns=(
            "javascript:"
            "data:text/html"
            "eval\("
            "document\.write"
            "innerHTML.*="
            "script.*src.*http"
            "\.exe"
            "\.bat"
            "\.cmd"
            "\.ps1"
          )
          
          found_issues=0
          
          for pattern in "${suspicious_patterns[@]}"; do
            matches=$(grep -r -i --include="*.xml" --include="*.js" --include="*.html" "$pattern" . || true)
            if [ -n "$matches" ]; then
              echo "‚ö†Ô∏è Found suspicious pattern '$pattern':"
              echo "$matches"
              found_issues=1
            fi
          done
          
          # Check file sizes (themes shouldn't have huge files)
          large_files=$(find . -type f -size +10M -not -path "./.git/*" || true)
          if [ -n "$large_files" ]; then
            echo "‚ö†Ô∏è Large files found (>10MB):"
            echo "$large_files"
            found_issues=1
          fi
          
          if [ $found_issues -eq 0 ]; then
            echo "‚úÖ Security scan passed"
          else
            echo "‚ö†Ô∏è Security scan found potential issues - manual review recommended"
          fi

  lint-and-style:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check required files
        run: |
          required_files=("theme.xml" "README.md")
          missing_files=()
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "‚ùå Missing required files: ${missing_files[*]}"
            echo "Required files: ${required_files[*]}"
            exit 1
          fi
          
          echo "‚úÖ All required files present"

      - name: Validate theme structure
        run: |
          if [ -f "theme.xml" ]; then
            python3 << 'EOF'
          import xml.etree.ElementTree as ET
          from pathlib import Path
          
          def validate_theme_xml():
              try:
                  tree = ET.parse('theme.xml')
                  root = tree.getroot()
                  
                  print(f"‚úÖ theme.xml is valid XML")
                  
                  # Show available attributes for information only
                  attrs = root.attrib
                  if attrs:
                      print(f"‚ÑπÔ∏è Theme attributes found: {list(attrs.keys())}")
                  
                  return True
                  
              except Exception as e:
                  print(f"‚ùå Error parsing theme.xml: {e}")
                  return False
          
          if not validate_theme_xml():
              exit(1)
          EOF
          else
            echo "‚ÑπÔ∏è No theme.xml found - skipping theme structure validation"
          fi

      - name: Check license compliance
        run: |
          license_found=false
          
          # Check for LICENSE file
          if [ -f "LICENSE" ] || [ -f "LICENSE.txt" ] || [ -f "LICENSE.md" ]; then
            echo "‚úÖ LICENSE file found"
            license_found=true
          fi
          
          # Check for license in README
          if grep -qi "license\|copyright\|creative commons\|cc-by\|mit\|apache\|gpl" README.md 2>/dev/null; then
            echo "‚úÖ License information found in README.md"
            license_found=true
          fi
          
          # Check for license in theme.xml
          if grep -qi "license\|copyright" theme.xml 2>/dev/null; then
            echo "‚úÖ License information found in theme.xml"
            license_found=true
          fi
          
          if [ "$license_found" = false ]; then
            echo "‚ö†Ô∏è No license information found"
            echo "Consider adding a LICENSE file or license information to README.md"
            echo "This is recommended but not mandatory for this build"
          fi

  minify-and-optimize:
    runs-on: ubuntu-latest
    needs: [validate-xml, lint-and-style]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y libxml2-utils
          pip install lxml beautifulsoup4

      - name: Create optimized build
        run: |
          mkdir -p build/optimized
          
          # Copy all non-git files
          rsync -av --exclude='.git*' --exclude='.github*' --exclude='build*' ./ build/optimized/

      - name: Minify XML files
        run: |
          python3 << 'EOF'
          import os
          import xml.etree.ElementTree as ET
          from pathlib import Path
          
          def minify_xml(file_path):
              try:
                  # Parse the XML
                  tree = ET.parse(file_path)
                  root = tree.getroot()
                  
                  # Remove whitespace between elements
                  for elem in root.iter():
                      if elem.text:
                          elem.text = elem.text.strip()
                      if elem.tail:
                          elem.tail = elem.tail.strip()
                  
                  # Write back without pretty printing
                  tree.write(file_path, encoding='utf-8', xml_declaration=True)
                  print(f"‚úÖ Minified {file_path}")
                  
              except Exception as e:
                  print(f"‚ùå Error minifying {file_path}: {e}")
          
          # Find all XML files in the build directory
          xml_files = list(Path('build/optimized').rglob('*.xml'))
          
          for xml_file in xml_files:
              minify_xml(xml_file)
          
          print(f"‚úÖ Minified {len(xml_files)} XML files")
          EOF

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: optimized-theme
          path: build/optimized/
          retention-days: 30

  package-release:
    runs-on: ubuntu-latest
    needs: [minify-and-optimize]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download optimized theme
        uses: actions/download-artifact@v4
        with:
          name: optimized-theme
          path: theme-build/

      - name: Create release packages
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          THEME_NAME="canvas-theme"
          
          cd theme-build
          
          # Create tar.gz package
          tar -czf "../${THEME_NAME}-${VERSION}.tar.gz" .
          
          cd ..
          
          # Generate checksum
          sha256sum "${THEME_NAME}-${VERSION}.tar.gz" > "${THEME_NAME}-${VERSION}.tar.gz.sha256"
          
          echo "‚úÖ Created packages:"
          ls -la *.tar.gz *.sha256

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-packages
          path: |
            *.tar.gz
            *.sha256

  deploy-release:
    runs-on: ubuntu-latest
    needs: [package-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          name: release-packages
          path: packages/

      - name: Generate release notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          
          cat > release-notes.md << EOF
          ## üì¶ Package Contents
          - Minified and optimized XML files
          - All theme assets (images, xml, font)
          - Documentation and license information
          
          ## üîç Validation Results
          ‚úÖ XML syntax validation passed
          ‚úÖ Theme structure verified
          ‚úÖ Image references checked
          ‚úÖ Security scan completed
          ‚úÖ License compliance verified
          
          ## üì• Downloads
          - **tar.gz**: Compressed theme package
          - **sha256**: Checksum for integrity verification
          
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: packages/*
          body_path: release-notes.md
          tag_name: ${{ github.ref_name }}
          name: "Canvas Theme ${{ github.ref_name }}"
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-release]
    if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Clean up artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            optimized-theme
            release-packages
          failOnError: false
